@model IEnumerable<JobTrackerApp.Models.JobApplicationModels.JobApplicationListDetail>

@{
    ViewBag.Title = "Index";
}

<h2>Job Applications</h2>

<p class="create-job-link">
    @Html.ActionLink("Create Job Application", "Create")
</p>

@if (TempData.ContainsKey("SaveResult"))
{
    <div class="alert alert-success fade in" role="alert">
        <button type="button" class="close" data-dismiss="alert">
            <span>&times;</span>
        </button>
        @TempData["SaveResult"]
    </div>
}
<div class="job-application-page">
    <div class="card-container">
        @{
            var orderedApplications = Model.OrderBy(item =>
            {
                if (item.Category == JobTrackerApp.Data.Enums.JobApplicationEnums.JobApplicationCategory.InterviewScheduled)
                    return 0;
                else if (item.Category == JobTrackerApp.Data.Enums.JobApplicationEnums.JobApplicationCategory.ActiveApplications)
                    return 1;
                else if (item.Category == JobTrackerApp.Data.Enums.JobApplicationEnums.JobApplicationCategory.RejectedApplications)
                    return 2;
                else
                    return 3;
            }).ThenBy(item => item.CompanyName);
        }

        <div class="category-section" data-category="ActiveApplications">
            <h2 class="card-heading">Active Applications</h2>
            <hr />
            @foreach (var item in orderedApplications.Where(x => x.Category == JobTrackerApp.Data.Enums.JobApplicationEnums.JobApplicationCategory.ActiveApplications))
            {
                <div class="card" data-id="@item.JobApplicationId" style="background-color: #e66464;" draggable="true">
                    <div class="card-body">
                        <h3>@Html.DisplayFor(modelItem => item.JobTitle) </h3>
                        <h4>@Html.DisplayFor(modelItem => item.CompanyName) </h4>
                        <h6 class="display-category">@Html.DisplayFor(modelItem => item.DisplayCategory) </h6>
                    </div>
                </div>
            }
        </div>

        <div class="category-section" data-category="InterviewScheduled">
            <h2 class="card-heading">Interview Scheduled</h2>
            <hr />
            @foreach (var item in orderedApplications.Where(x => x.Category == JobTrackerApp.Data.Enums.JobApplicationEnums.JobApplicationCategory.InterviewScheduled))
            {
                <div class="card" data-id="@item.JobApplicationId" style="background-color: #6cf8e1;" draggable="true">
                    <div class="card-body">
                        <h3>@Html.DisplayFor(modelItem => item.JobTitle) </h3>
                        <h4>@Html.DisplayFor(modelItem => item.CompanyName) </h4>
                        <h6 class="display-category">@Html.DisplayFor(modelItem => item.DisplayCategory) </h6>
                    </div>
                </div>
            }
        </div>
        <div class="category-section" data-category="RejectedApplications">
            <h2 class="card-heading">Rejected Applications</h2>
            <hr />
            @foreach (var item in orderedApplications.Where(x => x.Category == JobTrackerApp.Data.Enums.JobApplicationEnums.JobApplicationCategory.RejectedApplications))
            {
                <div class="card" data-id="@item.JobApplicationId" style="background-color: #fff0c8;" draggable="true">
                    <div class="card-body">
                        <h3>@Html.DisplayFor(modelItem => item.JobTitle) </h3>
                        <h4>@Html.DisplayFor(modelItem => item.CompanyName) </h4>
                        <h6 class="display-category">@Html.DisplayFor(modelItem => item.DisplayCategory) </h6>
                    </div>
                </div>
            }
        </div>

        <div id="logout-button">
            @using (Html.BeginForm("logoff", "account", FormMethod.Post, new { id = "logout-form" }))
            {
                @Html.AntiForgeryToken()
                <ul>
                    <li><a href="javascript:document.getElementById('logout-form').submit()">Log Out</a></li>
                </ul>
            }
        </div>
    </div>
</div>

<script>
    function handleCardClick(event) {
        const jobApplicationId = event.currentTarget.dataset.id;
        window.location.href = "/JobApplication/Details/" + jobApplicationId;
    }

    const cardElements = document.querySelectorAll('.card');
    cardElements.forEach(card => {
        card.addEventListener('click', handleCardClick);
    });

    @* new javascript *@

    function handleDragStart(event) {
        event.dataTransfer.setData("text/plain", event.target.dataset.id);
    }

    function handleDragOver(event) {
        event.preventDefault();
    }

    function handleDrop(event) {
        event.preventDefault();

        const cardId = event.dataTransfer.getData("text/plain");
        const newCategory = event.currentTarget.dataset.category;

        const card = document.querySelector(`.card[data-id="${cardId}"]`);

        // Only update the category if it has changed
        if (card.dataset.category !== newCategory) {
            card.dataset.category = newCategory;

            const categoryDisplay = card.querySelector('.display-category');
            categoryDisplay.textContent = newCategory;

            const categoryNameWithSpace = getCategoryNameWithSpace(newCategory);
            categoryDisplay.textContent = categoryNameWithSpace;
            function getCategoryNameWithSpace(category) {
                return category.replace(/([A-Z])/g, ' $1').trim();
            }

            const backgroundColor = getCategoryBackgroundColor(newCategory);
            card.style.backgroundColor = backgroundColor;

            // Move the card element to the appropriate category section
            const categorySection = document.querySelector(`.category-section[data-category="${newCategory}"]`);
            categorySection.appendChild(card);

            const cardsInCategory = Array.from(categorySection.querySelectorAll('.card'));
            const sortedCards = cardsInCategory.sort((a, b) => {
                const companyA = a.querySelector('h4').textContent.toLowerCase();
                const companyB = b.querySelector('h4').textContent.toLowerCase();
                return companyA.localeCompare(companyB);
            });
            sortedCards.forEach(card => categorySection.appendChild(card));

            // Send AJAX request to update the category
            fetch(`/JobApplication/UpdateCategory/${cardId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ cardId: cardId, newCategory: newCategory })
            })
                .then(response => {
                    // Handle the response from the server
                    if (response.ok) {
                        console.log('Category updated successfully');
                    } else {
                        console.error('Failed to update category');
                    }
                })
                .catch(error => {
                    console.error('An error occurred:', error);
                });
        }
    }

    function getCategoryBackgroundColor(category) {
        switch (category) {
            case 'ActiveApplications':
                return '#e66464';
            case 'InterviewScheduled':
                return '#6cf8e1';
            case 'RejectedApplications':
                return '#fff0c8';
            default:
                return '';
        }
    }

    const cards = document.querySelectorAll(".card");
    const categorySections = document.querySelectorAll(".category-section");

    cards.forEach(card => {
        card.addEventListener("dragstart", handleDragStart);
    });

    categorySections.forEach(section => {
        section.addEventListener("dragover", handleDragOver);
        section.addEventListener("drop", handleDrop);
    });

</script>
